/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pendaftaranlomba;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 *
 * @author ASUS
 */
public class ongoingMatch extends javax.swing.JFrame {
   private DefaultTableModel tableModel2;
      private DefaultTableModel tableModel1;
      
public String idBracketIndiv;
public String idBracketTeam;
    /**
     * Creates new form ongoingMatch
     */
    public ongoingMatch() {
        initComponents();
        
         tableModel2 = (DefaultTableModel) jTableTeam.getModel();
     tableModel1 = (DefaultTableModel) jTableIndiv.getModel();
  
      jTableIndiv.addMouseListener(new java.awt.event.MouseAdapter() {
          
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            int selectedRow = jTableIndiv.getSelectedRow();
            idBracketIndiv = jTableIndiv.getValueAt(selectedRow, 4).toString();
               System.out.println("ID Indiv : " + idBracketIndiv);
        }
    });
    
      jTableTeam.addMouseListener(new java.awt.event.MouseAdapter() {
          
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            int selectedRow = jTableTeam.getSelectedRow();
            idBracketTeam = jTableTeam.getValueAt(selectedRow, 4).toString();

            System.out.println("ID Team: " + idBracketTeam);

        }
    });
    }
    
      public void viewBracketTeam(JSONArray jsonArray) {
         tableModel2.setRowCount(0);
        String kondisi ="";
        for (Object object : jsonArray) {
            JSONObject data = (JSONObject) object;
            String team1 = (String) data.get("team1");
            String team2 = (String) data.get("team2");
            String date = (String) data.get("date");
            Long idBracketTeam = (Long) data.get("idBracketTeam");
              Long status = (Long) data.get("status");
            if (status == 0) {
                  kondisi = "ongoing";
              } else if (status == 1) {
                  kondisi = "selese";
              } 
            Object[] rowData = {team1,team2,date,kondisi,idBracketTeam};
             tableModel2.addRow(rowData);
        }
            jTableTeam.setModel(tableModel2);
    }
      
        public void viewBracketIndiv(JSONArray jsonArray) {
         tableModel1.setRowCount(0);
        String kondisi ="";
        for (Object object : jsonArray) {
            JSONObject data = (JSONObject) object;
            String peserta1 = (String) data.get("peserta1");
            String peserta2 = (String) data.get("peserta2");
            String date = (String) data.get("date");
 
              Long status = (Long) data.get("status");
              Long idbracket = (Long) data.get("idbracketIndiv");
            if (status == 0) {
                  kondisi = "ongoing";
              } else if (status == 1) {
                  kondisi = "selese";
              } 
            Object[] rowData = {peserta1,peserta2,date,kondisi,idbracket};
            tableModel1.addRow(rowData);

        }
            jTableIndiv.setModel(tableModel1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableTeam = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableIndiv = new javax.swing.JTable();
        jButtonDoneTeam = new javax.swing.JButton();
        jButtonDoneIndiv = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel3.setText("Match Individu Ongoing");

        jTableTeam.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Team 1", "Team 2", "Date", "Status", "idbracket"
            }
        ));
        jScrollPane1.setViewportView(jTableTeam);

        jTableIndiv.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Peserta 1", "Peserta 2", "Date", "Status", "idbracket"
            }
        ));
        jScrollPane2.setViewportView(jTableIndiv);

        jButtonDoneTeam.setText("Mark as done");
        jButtonDoneTeam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDoneTeamActionPerformed(evt);
            }
        });

        jButtonDoneIndiv.setText("Mark as done");
        jButtonDoneIndiv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDoneIndivActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel5.setText("Match Team Ongoing");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonDoneTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 829, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonDoneIndiv, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel5)))
                .addContainerGap(452, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jLabel3)
                        .addGap(27, 27, 27))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonDoneTeam, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(231, 231, 231)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDoneIndiv, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDoneIndivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDoneIndivActionPerformed
        // TODO add your handling code here:
           String url = "http://localhost:7000/updateBracketIndividu";
        String postData = "{\"idbracketIndiv\": " + idBracketIndiv + "}";


                try {
                            
                    URL obj = new URL(url);
                    HttpURLConnection con = (HttpURLConnection) obj.openConnection();

                    // Set the request method to POST
                    con.setRequestMethod("POST");

                    // Set the request headers
                    con.setRequestProperty("Content-Type", "application/json");

                    // Enable the output stream and write the POST data
                    con.setDoOutput(true);
                    OutputStream os = con.getOutputStream();
                    os.write(postData.getBytes());
                    os.flush();
                    os.close();

                    // Get the response from the server (if needed)
                    int responseCode = con.getResponseCode();
                    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
                    String inputLine;
                    StringBuilder response = new StringBuilder();
                    while ((inputLine = in.readLine()) != null) {
                        response.append(inputLine);
                    }
                    in.close();

                    // Handle the response (if needed)
                    System.out.println(response.toString());

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                
            try {
            ongoingMatch form = new ongoingMatch();
            
      
            String url2 = "http://localhost:7000/bracketIndivOngoing";

      
            URL obj = new URL(url2);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();

            con.setRequestMethod("GET");

        
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            System.out.println(response.toString());
            
            JSONParser parser = new JSONParser();
            JSONObject jsonObject = (JSONObject) parser.parse(response.toString());
            JSONArray jsonArray = (JSONArray) jsonObject.get("response");



            if (jsonArray.size() > 0) {
               form.viewBracketIndiv(jsonArray); 
             

             viewBracketIndiv(jsonArray);
            } else {
                System.out.println("No data found.");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonDoneIndivActionPerformed

    private void jButtonDoneTeamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDoneTeamActionPerformed
        // TODO add your handling code here:
             String url = "http://localhost:7000/updateBracketTeam";
        String postData = "{\"idBracketTeam\": " + idBracketTeam + "}";


                try {
                            
                    URL obj = new URL(url);
                    HttpURLConnection con = (HttpURLConnection) obj.openConnection();

                    // Set the request method to POST
                    con.setRequestMethod("POST");

                    // Set the request headers
                    con.setRequestProperty("Content-Type", "application/json");

                    // Enable the output stream and write the POST data
                    con.setDoOutput(true);
                    OutputStream os = con.getOutputStream();
                    os.write(postData.getBytes());
                    os.flush();
                    os.close();

                    // Get the response from the server (if needed)
                    int responseCode = con.getResponseCode();
                    BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
                    String inputLine;
                    StringBuilder response = new StringBuilder();
                    while ((inputLine = in.readLine()) != null) {
                        response.append(inputLine);
                    }
                    in.close();

                    // Handle the response (if needed)
                    System.out.println(response.toString());

                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                
            try {
            ongoingMatch form = new ongoingMatch();
            
      
            String url2 = "http://localhost:7000/bracketTeamOngoing";

      
            URL obj = new URL(url2);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();

            con.setRequestMethod("GET");

        
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            System.out.println(response.toString());
            
            JSONParser parser = new JSONParser();
            JSONObject jsonObject = (JSONObject) parser.parse(response.toString());
            JSONArray jsonArray = (JSONArray) jsonObject.get("response");



            if (jsonArray.size() > 0) {
               form.viewBracketTeam(jsonArray); 
             

               viewBracketTeam(jsonArray);
            } else {
                System.out.println("No data found.");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonDoneTeamActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      ongoingMatch form = new ongoingMatch();
        try {
     

            String url = "http://localhost:7000/bracketTeamOngoing";

            // Buat objek URL dan HttpURLConnection
            URL obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();

            con.setRequestMethod("GET");


            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
      
            System.out.println(response.toString());
            
            JSONParser parser = new JSONParser();
            JSONObject jsonObject = (JSONObject) parser.parse(response.toString());
            JSONArray jsonArray = (JSONArray) jsonObject.get("response");


            if (jsonArray.size() > 0) {
               form.viewBracketTeam(jsonArray); 
   
          
            } else {
                System.out.println("No data found.");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        
           try {
     

            String url = "http://localhost:7000/bracketIndivOngoing";

            // Buat objek URL dan HttpURLConnection
            URL obj = new URL(url);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();

            con.setRequestMethod("GET");


            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuilder response = new StringBuilder();

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
      
            System.out.println(response.toString());
            
            JSONParser parser = new JSONParser();
            JSONObject jsonObject = (JSONObject) parser.parse(response.toString());
            JSONArray jsonArray = (JSONArray) jsonObject.get("response");


            if (jsonArray.size() > 0) {
               form.viewBracketIndiv(jsonArray); 
   
          
            } else {
                System.out.println("No data found.");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BracketTeam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BracketTeam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BracketTeam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BracketTeam.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
        form.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDoneIndiv;
    private javax.swing.JButton jButtonDoneTeam;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableIndiv;
    private javax.swing.JTable jTableTeam;
    // End of variables declaration//GEN-END:variables
}
